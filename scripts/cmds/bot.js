const axios = require("axios");

const BOT_REPLIES = ["Ami bot na Ami tor Bow","< ‡¶ï‡ßá‡¶â ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶®‡¶æ..!üôÇ\nMaybe ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶Ç‡¶ï..ü§∑‚Äç‚ôÄÔ∏è","< ‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≠‡¶æ‡ßú‡¶æ ‡¶¨‡¶æ‡¶Å‡¶ö‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡ß®‡ß´ ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ï‡ßã‡¶≤‡ßç‡¶° ‡¶°‡ßç‡¶∞‡¶ø‡¶Ç‡¶ï‡¶∏ ‡¶ñ‡ßá‡ßü‡ßá ‡¶π‡ßá‡¶ü‡ßá ‡¶π‡ßá‡¶ü‡ßá ‡¶Ü‡¶∏‡¶æ ‡¶Æ‡¶ß‡ßç‡¶Ø‡¶¨‡¶ø‡¶§‡ßç‡¶§ ‡¶Ü‡¶Æ‡¶ø.!üôÇ","‡¶ú‡ßÄ‡¶¨‡¶®‡ßá ‡¶è‡¶§‡ßã ‡¶Æ‡ßÅ ‡¶∞ ‡¶ó‡ßÄ ‡¶ñ‡¶æ‡¶á‡¶õ‡¶ø ‡¶Ø‡ßá ‡¶è‡¶ñ‡¶® ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶∂‡¶ø ‡ßü‡¶æ ‡¶≤ ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá!üôÇ","‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶ø‡¶Ø‡¶º‡ßá‡¶§‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶¶‡ßá‡¶¨‡ßã ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶∞ ‡¶¨‡¶ø‡¶™‡¶¶‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®‡ßá ‡¶™‡¶æ‡¶∂‡ßá ‡¶Ü‡¶õ‡¶ø","‡¶≠‡¶æ‡¶≤‡ßç‡¶≤‡ßÅ‡¶ï‡ßá‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™‡ßá ‡¶Ø‡ßá ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶ü‡¶æ ‡¶ó‡¶æ‡¶õ‡ßá ‡¶â‡¶†‡ßá‡¶õ‡¶ø‡¶≤ ‡¶ì‡¶∞ ‡¶Ü‡¶∏‡¶≤‡ßá  ‡¶™‡ßç‡¶∞‡¶ï‡ßÉ‡¶§ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡ßá ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶õ‡¶ø‡¶≤‡ßã?üôÑ","‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶Æ‡¶æ!‡¶®‡ßÅ‡¶∑‡¶ï‡ßá ‡¶õ‡ßã‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶á‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡¶∞‡ßá.!ü§ó","ami holam Petni der bow "," ami jin ami to bot na ü§¶‚Äç‚ôÇÔ∏è "," Ami tumake onk valobashi go "," tmi ki amr jamai hoba","Ji hukum Moharaj","Amr boss Rakib Ke aktu ador de "];
const API_CONFIG_URL = "https://raw.githubusercontent.com/SAGOR-KINGx/SaGor/refs/heads/main/api.json";

async function getApiBase() {
  try {
    const res = await axios.get(API_CONFIG_URL);
    return res.data.api;
  } catch {
    return null;
  }
}

module.exports = {
  config: {
    name: "bot",
    version: "9.0.0",
    author: "SaGor",
    role: 0,
    category: "auto",
    prefix: false,
    shortDescription: "Bot with teach system + trigger chat + reply continuation"
  },

  onStart: async () => {
    console.log("‚úÖ 'bot' command loaded (trigger + teach + reply system active)");
  },

  teach: async function (apiUrl, ask, ans) {
    try {
      const res = await axios.get(`${apiUrl}/sim`, { params: { teach: `${ask}|${ans}` } });
      return res.data;
    } catch (err) {
      console.error("‚ùå Teach Error:", err.message);
      return null;
    }
  },

  onChat: async function ({ api, event, message }) {
    try {
      const { body, messageReply } = event;
      if (!body) return;

      const text = body.trim().toLowerCase();
      const botID = await api.getCurrentUserID();
      const API_BASE = await getApiBase();
      if (!API_BASE) return message.reply("‚ö†Ô∏è API link not found (GitHub JSON load failed)");

      if (messageReply && text.startsWith("teach ")) {
        const ask = text.slice(6).trim();
        const ans = messageReply.body?.trim();
        if (!ans) return message.reply("‚ùå Reply to a message to teach its content!");
        const result = await this.teach(API_BASE, ask, ans);
        return message.reply(result?.success
          ? `‚úÖ Teach Added!\nüí¨ ASK: ${ask}\nüí° ANS: ${ans}`
          : `‚ö†Ô∏è Teach failed! ${result?.error || ""}`);
      }

      if (text.startsWith("teach ")) {
        const input = text.slice(6).trim();
        const [ask, ans] = input.split(/[\|\-]/).map(x => x?.trim());
        if (ask && ans) {
          const result = await this.teach(API_BASE, ask, ans);
          return message.reply(result?.success
            ? `‚úÖ Teach Added!\nüí¨ ASK: ${ask}\nüí° ANS: ${ans}`
            : `‚ö†Ô∏è Teach failed! ${result?.error || ""}`);
        }
      }

      const triggerWords = ["baby", "bby", "bot", "‡¶¨‡ßá‡¶¨‡¶ø", "‡¶∏‡¶æ‡¶ó‡¶∞", "‡¶¨‡¶ü","sagor"];
      const startsWithTrigger = triggerWords.some(w => text.startsWith(w));

      if (startsWithTrigger) {
        const userText = text.replace(/^\S+\s*/, "");

        if (!userText) {
          const randomReply = BOT_REPLIES[Math.floor(Math.random() * BOT_REPLIES.length)];
          return api.sendMessage(randomReply, event.threadID, (error, info) => {
            if (!info) return;
            global.GoatBot.onReply.set(info.messageID, {
              commandName: "bot",
              type: "reply",
              messageID: info.messageID,
              author: event.senderID
            });
          }, event.messageID);
        }

        const response = await axios.get(`${API_BASE}/sim`, { params: { text: userText } });
        const reply = response.data.answer || "ü§ñ Couldn't get a reply right now.";
        return api.sendMessage(reply, event.threadID, (error, info) => {
          global.GoatBot.onReply.set(info.messageID, {
            commandName: "bot",
            type: "reply",
            messageID: info.messageID,
            author: event.senderID,
            reply
          });
        }, event.messageID);
      }
    } catch (err) {
      console.error("‚ùå Chatbot Error:", err.message);
      return message.reply("‚ùå Error: " + err.message);
    }
  },

  onReply: async function ({ api, event }) {
    try {
      const botID = await api.getCurrentUserID();
      if (botID === event.senderID) return;

      if (event.type === "message_reply") {
        const API_BASE = await getApiBase();
        if (!API_BASE) return api.sendMessage("‚ö†Ô∏è API not found!", event.threadID);
        const response = await axios.get(`${API_BASE}/sim`, { params: { text: event.body?.toLowerCase() } });
        const reply = response.data.answer || "ü§ñ Couldn't get a reply right now.";
        await api.sendMessage(reply, event.threadID, (error, info) => {
          global.GoatBot.onReply.set(info.messageID, {
            commandName: "bot",
            type: "reply",
            messageID: info.messageID,
            author: event.senderID,
            reply
          });
        }, event.messageID);
      }
    } catch (err) {
      return api.sendMessage(`‚ùå Error: ${err.message}`, event.threadID, event.messageID);
    }
  }
};
